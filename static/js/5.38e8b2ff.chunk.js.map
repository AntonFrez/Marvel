{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/CharSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_ref6","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","_useState5","_useState6","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","_ref2","_callee2","name","_context2","getCharacter","_ref3","_callee3","id","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","_defineProperty","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","View","imgStyle","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","oneCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","CharInfo","charId","prototype","PropTypes","string","CharSearchForm","onCharLoaded","errorMessage","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","value","errorInfo","console","log","this","setState","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/5.38e8b2ff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useHttp } from \"../hooks/http.hook\"\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError, process, setProcess} = useHttp()\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = 'apikey=b683494e1d6b469406ebff7c4af69cfb'\r\n    const _baseOffset = 210\r\n\r\n    const getAllCharacters = async(offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`)\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0,210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki:  char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n    return {loading,\r\n            error,\r\n            clearError,\r\n            process,\r\n            setProcess,\r\n            getAllCharacters,\r\n            getCharacterByName,\r\n            getCharacter,\r\n            clearError,\r\n            getAllComics,\r\n            getComic,}\r\n}\r\n\r\nexport default useMarvelService","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, \r\n        method = 'GET', \r\n        body = null, \r\n        headers = {'Content-Type': 'application/json'}) => {\r\n\r\n            setLoading(true)\r\n            setProcess('loading')\r\n\r\n            try {\r\n                const response = await fetch(url, {method, body, headers})\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n                }\r\n\r\n                const data = await response.json()\r\n                setLoading(false)\r\n                return data\r\n\r\n            } catch(e) {\r\n                setLoading(false)\r\n                setError(e.message)\r\n                setProcess('error')\r\n                throw e\r\n            }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null)\r\n        setProcess('loading')\r\n    }, [])\r\n\r\n    return {loading, request, error, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner'\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage'\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Skeleton/>\r\n            break\r\n        case 'loading':\r\n            return <Spinner/>\r\n            break\r\n        case 'confirmed':\r\n            return <Component char={data}/>\r\n            break\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n            break\r\n        default:\r\n            throw new Error('Unexpected process state')\r\n    }\r\n}\r\n\r\nexport default setContent","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({})\n    const {getCharacter, clearError, process, setProcess} = useMarvelService()\n\n    useEffect(() => {\n        updateChar()\n        const timerId = setInterval(updateChar, 60000)\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n    \n\n    const oneCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n        getCharacter(id)\n        .then(oneCharLoaded)\n        .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char\n   \n\n    let imgStyle = {'objectFit' : 'cover'}\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'}\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n               {description}\n            </p>\n            <div className=\"randomchar__btns\">\n                <a href={homepage} className=\"button button__main\">\n                    <div className=\"inner\">homepage</div>\n                </a>\n                <a href={wiki} className=\"button button__secondary\">\n                    <div className=\"inner\">Wiki</div>\n                </a>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch(process) {\n        case 'waiting':\n            return <Spinner/>\n            break\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>\n            break\n        case 'confirmed':\n            return <Component/>\n            break\n        case 'error':\n            return <ErrorMessage/>\n            break\n        default:\n            throw new Error('Unexpected process state')\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([])\n    const [newItemLoading, setNewItemLoading] = useState(false)\n    const [offset, setOffset] = useState(210)\n    const [charEnded, setCharEnded] = useState(false)\n\n    const {loading, error, getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n            \n        }\n\n        setCharList(charList => [...charList, ...newCharList])\n        setNewItemLoading(newItemLoading => false)\n        setOffset(offset => offset + 9)\n        setCharEnded(charEnded => ended)\n    }\n\n   \n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.id}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () =>  renderItems(charList), newItemLoading)\n        // eslint-disable-next-lines\n    }, [process])\n\n        return (\n            <div className=\"char__list\">\n                {elements}\n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types'\nimport useMarvelService from '../../services/MarvelService';\nimport './charInfo.scss';\nimport setContent from '../../utils/setContent';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null)\n \n    const {getCharacter, clearError, process, setProcess} = useMarvelService()\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props\n        if (!charId) {\n            return\n        }\n\n        clearError()\n        getCharacter(charId)\n        .then(oneCharLoaded)\n        .then(() => setProcess('confirmed'))\n    }\n\n    const oneCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char\n\n    let imgStyle = {'objectFit' : 'cover'}\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'}\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'There is no comics whit this character'}\n                    {\n                        comics.map((item, i) => {\n                            // eslint-disable-next-line\n                            if (i > 9) return\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    {item.name}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\nCharInfo.prototype = {\n    charId: PropTypes.string\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../CharSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Helmet>\r\n            <meta\r\n                name=\"description\"\r\n                content=\"Marvel information portal\"\r\n            />\r\n        <title>Marvel information portal</title>\r\n        </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n               \r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage"],"sourceRoot":""}